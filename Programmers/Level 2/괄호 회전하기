#include <iostream>
#include <string>
#include <vector>
#include <stack>
#include <deque>
using namespace std;

bool check(deque<char> q)
{
	stack<char> stk;
	bool flag = true;

	while (!q.empty()) // [](){}
	{
		char c = q.front();
		q.pop_front();

		if (c == '[' || c == '{' || c == '(')
		{
			stk.push(c);
		}
		else 
		{
			if (c == ')')
			{
				if (stk.empty() || stk.top() != '(')
				{
					return false;
				}
				else
				{
					stk.pop();
				}
	
			}
			else if (c == '}')
			{
				if (stk.empty() || stk.top() != '{')
				{
					return false;
				}
				else
				{
					stk.pop();
				}

			}
			else if ( c== ']')
			{
				if (stk.empty() || stk.top() != '[')
				{
					return false;
				}
				else
				{
					stk.pop();
				}
			}
		}

	}
    if (!stk.empty()) return false;
	return flag;
}

int solution(string s)
{
	int answer = 0;
	int size = s.length();
	
	deque<char> dq;

	for (int i = 0; i < s.length(); i++)
	{
		dq.push_back(s[i]);
	}

	while (size--)
	{

		if (check(dq))
		{
			answer++;
		}

		char c = dq.front();
		dq.pop_front();
		dq.push_back(c);

	}

	return answer;
}
