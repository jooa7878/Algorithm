#include<vector>
#include <queue>

using namespace std;

bool visited[101][101];
int dx[4] = {1,-1,0,0};
int dy[4] = {0,0,1,-1};

int solution(vector<vector<int>> maps)
{
    int answer = 0;
    queue<pair<pair<int, int>,int>> q;
    
    q.push(make_pair(make_pair(0,0),0));
    visited[0][0] = true;
    
    while(!q.empty())
    {
        int nx = q.front().first.first;
        int ny = q.front().first.second;
        int step = q.front().second;
        
        if(nx == maps.size()-1 && ny == maps[0].size()-1)
        {
            return step+1;    
        }
        
        q.pop();
        
        for(int i=0; i<4; i++)
        {
            for(int j=0; j<4; j++)
            {   
                int x = nx + dx[i];
                int y = ny  + dy[i];
                
                if(x >= 0 && x < maps.size() && y >= 0 && y<=maps[0].size() && !visited[x][y] 
                  && maps[x][y] == 1
                  )
                {
                    q.push(make_pair(make_pair(x,y),step+1));
                    visited[x][y] =true;
                }
                
            }
        }
        
    }
    
    
    return -1;
}
