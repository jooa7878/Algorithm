#include <iostream>
#include <string>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;


int N, M, K, X;
vector<int> vec[300001];
bool visited[300001];
vector<int> answer;

void solution() {

	queue<pair<int,int>> q;

	q.push(make_pair(0,X));

	visited[X] = true;

	while (!q.empty())
	{
		int distance = q.front().first;
		int node = q.front().second;

		q.pop();

		if (distance > K) break;
		if (distance == K) answer.push_back(node);

		for (int i = 0; i < vec[node].size(); i++)
		{
			if (!visited[vec[node][i]])
			{
				visited[vec[node][i]] = true;
				q.push(make_pair(distance + 1, vec[node][i]));
			}
		}
	}

	if (answer.size() == 0)
	{
		cout << -1;
		return;
	}

	sort(answer.begin(), answer.end());
	for (auto& a : answer)
	{
		cout << a << '\n';
	}

	
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	cin >> N >> M >> K >> X;

	for (int i = 0; i < M; i++)
	{
		int from;
		int to;
		cin >> from >> to;

		vec[from].push_back(to);
	}

	solution();
}
