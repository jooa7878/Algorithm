#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int w, h;
int dx[8] = { -1, 1,  0, 0, 1,  1, -1, -1 };
int dy[8] = { 0,  0, -1, 1, 1, -1,  1, -1 };

void solution() {
	int answer = 0;

	int arr[51][51] = { 0 };
	bool visited[51][51] = { false };
	vector<pair<int, int>> vec;

	queue<pair<int, int>> q;

	for (int i = 0; i < h; i++)
	{
		for (int j = 0; j < w; j++)
		{
			int num;
			cin >> num;
			arr[i][j] = num;
			if (num == 1)
			{
				vec.push_back(make_pair(i, j));
			}
		}
	}

	int size = vec.size();

	for (int i = 0; i < size; i++)
	{
		if (!visited[vec[i].first][vec[i].second])
		{
			visited[vec[i].first][vec[i].second] = true;
			q.push(make_pair(vec[i].first, vec[i].second));
			answer++;
			while (!q.empty())
			{
				int nx = q.front().first;
				int ny = q.front().second;

				q.pop();

				for (int j = 0; j < 8; j++)
				{
					int x = nx + dx[j];
					int y = ny + dy[j];
					if (x >= 0 && y >= 0 && x < h && y < w && !visited[x][y] && arr[x][y] == 1)
					{
						visited[x][y] = true;
						q.push(make_pair(x, y));
					}
				}
			}
		}
	}
	
	cout << answer << '\n';
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	
	while (true)
	{
		cin >> w >> h;

		if (w == 0 && h == 0) break;

		solution();
	}

}


