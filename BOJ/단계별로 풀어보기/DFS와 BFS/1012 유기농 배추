#include <iostream>
#include <queue>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

const int MAX = 51;
int T;
int dx[4] = { -1,1,0,0 };
int dy[4] = { 0,0,-1,1 };
int M, N, K;

int dfs(int idx, int jdx, int arr[MAX][MAX], bool visited[MAX][MAX]) 
{
	int cnt = 0;

	visited[idx][jdx] = true;

	for (int i = 0; i < 4; i++)
	{
		int x = idx + dx[i];
		int y = jdx + dy[i];

		if (x >= 0 && y >= 0 && x < M && y < N &&
			arr[x][y] == 1 && !visited[x][y])
		{
			cnt++;
			cnt += dfs(x, y, arr, visited);
		}
	}

	return cnt;
}

void solution() {

	int arr[MAX][MAX] = { 0, };
	bool visited[MAX][MAX] = { false, };


	cin >> M >> N >> K;

	for (int i = 0; i < K; i++)
	{
		int x, y;
		cin >> x >> y;
		arr[x][y] = 1;
	}

	vector<int> vec;

	for (int i = 0; i < M; i++)
	{
		for (int j = 0; j < N; j++)
		{
			if (arr[i][j] == 1 && !visited[i][j])
			{
				vec.push_back(dfs(i, j, arr, visited));
			}
		}
	}

	cout << vec.size() << '\n';
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL); 
	
	cin >> T;

	for (int i = 0; i < T; i++)
	{
		solution();
	}
}
