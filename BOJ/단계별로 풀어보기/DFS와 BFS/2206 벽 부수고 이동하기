#include <iostream>
#include <string>
#include <queue>

using namespace std;

const int MAX = 1001;
int N, M;
int arr[MAX][MAX];
int dx[4] = { -1,1,0,0 };
int dy[4] = { 0,0,-1,1 };
bool visited[MAX][MAX][2];

int bfs()
{
	queue<pair<pair<int, int>, pair<int,bool>>> q;
	q.push(make_pair(make_pair(1, 1),make_pair(1,false)));

	while (!q.empty())
	{
		int size = q.size();
		
		int nx = q.front().first.first;
		int ny = q.front().first.second;
		int answer = q.front().second.first;
		bool chk = q.front().second.second;

		if (nx == N && ny == M) return answer;
		q.pop();
		for (int i = 0; i < 4; i++)
		{
			int x = nx + dx[i];
			int y = ny + dy[i];

			if (x > 0 && y > 0 && x <= N && y <= M &&
				arr[x][y] == 0 && !visited[x][y][chk])
			{
				q.push(make_pair(make_pair(x, y),make_pair(answer+1,chk)));
				visited[x][y][chk] = 1;
			}
			else if (!chk && x > 0 && y > 0 && x <= N && y <= M &&
				arr[x][y] == 1 && !visited[x][y][chk])
			{
				q.push(make_pair(make_pair(x, y), make_pair(answer + 1, true)));
				visited[x][y][chk] = 1;
			}


		}
	}

	return -1;
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cin >> N >> M;

	for (int i = 1; i <= N; i++)
	{
		string str = "";
		cin >> str;
		for (int j = 1; j <= str.length(); j++)
		{
			arr[i][j] = str[j - 1] - '0';
		}
	}

	visited[1][1][0] = 1;
	cout << bfs();
}
