#include <iostream>
#include <string>
#include <queue>

using namespace std;

const int MAX = 101;
int dx[4] = { -1,1,0,0 };
int dy[4] = { 0,0,-1,1 };
int N, M;
bool visited[MAX][MAX];
int arr[MAX][MAX];

int bfs(int x, int y, int cnt) {
	
	queue<pair<pair<int, int>,int>> q;
	q.push(make_pair(make_pair( x,y ), cnt));


	while (!q.empty())
	{
		x = q.front().first.first;
		y = q.front().first.second;
		cnt = q.front().second;
		q.pop();

		if (x == N - 1 && y == M - 1) return cnt;
		
		for (int i = 0; i < 4; i++)
		{
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx >= 0 && ny >=0 && nx < N && ny < M && arr[nx][ny] == 1 && !visited[nx][ny])
			{
				visited[nx][ny] = 1;
				q.push(make_pair(make_pair(nx, ny), cnt + 1));
			}
		}
		
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL); 
	
	cin >> N >> M;

	for (int i = 0; i < N; i++)
	{
		string str;
		cin >> str;
		for (int j = 0; j < M; j++)
		{
			arr[i][j] = str[j] - '0';
		}
	}

	visited[0][0] = 1;
	cout << bfs(0, 0, 1);

}
